openapi: "3.0.0"

info:
  title: "E-Commerce API"
  version: "1.0.0"
  description: "E-commerce application REST API that allows users to perform various CRUD operations such as registering an account, browsing products for sale, etc."

schemes:
  - http

host: localhost:3000

basePath: "/"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid

  schemas:
    User:
      properties:
        username:
          type: string
        password:
          type: string

    UserWithoutPassword:
      properties:
        id:
          type: integer
        username:
          type: string

    Product:
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        url_image:
          type: string
          nullable: true
        quantity:
          type: integer
        price:
          type: number
        date:
          type: string
          nullable: true
        active:
          type: boolean
        user_id:
          type: integer

    NewProduct:
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        url_image:
          type: string
          nullable: true
        quantity:
          type: integer
        price:
          type: number
        categories:
          type: array
          items:
            type: string

    CartItem:
      properties:
        cart_item_id:
          type: integer
        product_id:
          type: integer
        name:
          type: string
        in_stock:
          type: integer
        quantity_order:
          type: integer
        price:
          type: number
        total_price:
          type: number

    NewCartItem:
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    Order:
      properties:
        order_id:
          type: integer
        name:
          type: string
        description:
          type: string
        quantity:
          type: integer
        price:
          type: number
        date:
          type: string

paths:
  /users:
    get:
      tags:
        - User
      summary: Return all users
      responses:
        200:
          description: An array of Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
  /users/{id}:
    get:
      tags:
        - User
      summary: Returns a single User by ID
      parameters:
        - name: id
          description: User id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: User Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
    put:
      security:
      - cookieAuth: []
      tags:
        - User
      summary: Update User properties
      parameters:
        - name: id
          description: User id
          in: path
          required: true
          type: integer
      requestBody:
        description: An JSON object containing the updated User details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully.
        400:
          description: Bad Request. Updated Username or Password not provided.
        401:
          description: Unauthorized.
        500:
          description: Server Failure Bcrypt.
  /users/register:
    post:
      tags:
        - Authentication
      summary: Register a new User Account.
      requestBody:
        description: A JSON object containing the username and password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Successfully Registered
        400:
          description: Bad Request
  /users/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Logs in and returns the authentication cookie.
      requestBody:
        description: A JSON object containing the username and password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successfully Authenticated
        400:
          description: Bad Request
  /users/logout:
    post:
      tags:
        - Authentication
      summary: Log Out User
      responses:
        200:
          description: Successfully Logged Out
  /product:
    get:
      tags:
        - Product
      summary: Return all Products
      parameters:
        - name: active
          description: Filter only active publications
          in: query
          required: true
          type: boolean
        - name: category
          description: Filter products by category
          in: query
          required: false
          type: string
      responses:
        200:
          description: An array of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    post:
      security:
        - cookieAuth: []
      tags:
        - Product
      summary: Creates a new product
      requestBody:
        description: New Product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        201:
          description: Successfully created
        401:
          description: Unauthorized. Log In Required.
        500:
          description: Error during DB query.
        400:
          description: Bad Request. The name of the product already exists.
  /product/{id}:
    get:
      tags:
        - Product
      summary: Returns a single product
      parameters:
        - name: id
          description: Product id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: Server error
        400:
          description: Bad Request
  /category:
    get:
      tags:
        - Categories
      summary: Get all Categories
      responses:
        200:
          description: An Array with all Categories
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
  /cart:
    post:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Create a Cart
      description: >
        Only authenticated Users.
        Only one cart per user is allowed.
      responses:
        201:
          description: Cart Created Successfully
        400:
          description: User's Cart has been previously created.
  /cart/mine:
    get:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Get all Products in User's cart.
      description: >
        Only authenticated are allowed to use this endpoint.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        401:
          description: Unauthorized
    post:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Add Product to User's Cart
      description: >
        Only authenticated Users are allowed.
      requestBody:
        description: An object with the product ID and quantity intended to buy
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCartItem'
      responses:
        201:
          description: Product successfully added to Cart
        400:
          description: Bad request.
        401:
          description: Unauthorized.
  /cart/mine/{productId}:
    put:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Update Item Quantity
      description: >
        Only authenticated Users are allowed.
      parameters:
        - name: productId
          description: Product Id
          in: path
          required: true
          type: integer
      requestBody:
        description: An object with the new quantity
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        200:
          description: Product quantity updated successfully
        400:
          description: Bad request.
        401:
          description: Unauthorized.
    delete:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Delete Product from Cart
      description: >
        Only authenticated Users are allowed.
      parameters:
        - name: productId
          description: Product Id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: Product removed successfully.
        400:
          description: Bad request.
        401:
          description: Unauthorized.
  /cart/mine/checkout:
    post:
      tags:
        - Cart
      security:
        - cookieAuth: []
      summary: Verify Stock, Get Order Details, Create Order, Update Product Stock
      description: >
        Only authenticated Users are allowed.
      responses:
        200:
          description: Purchase procesed successfully.
        400:
          description: Bad request.
        401:
          description: Unauthorized.
        500:
          description: Server Error.
  /order/mine:
    get:
      tags:
        - Order
      security:
        - cookieAuth: []
      summary: Get All Orders
      description: >
        Only Authenticated Users
        Only User Orders
      responses:
        200:
          description: An array of Orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
  /order/mine/{id}:
    get:
      tags:
        - Order
      security:
        - cookieAuth: []
      summary: Get a single Order by Id
      description: >
        Only Authenticated Users
        Only User Orders
      parameters:
        - name: id
          description: Order Id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: An object with the Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Bad Request
        401:
          description: Unauthorized
